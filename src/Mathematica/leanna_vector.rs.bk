// Filename: vectors.rs
// Description: 2d vector for leanna game engine

pub trait LeannaVector2D {
    fn add();
}

impl<T> LeannaVector2D for Vec<T> {
    fn add() {
        todo!();
    }
}

pub fn add(x: Vec<f64>, y: Vec<f64>) -> Vec<f64> {
    let mut new_vector: Vec<f64> = Vec::new();

    for index in 0..x.len() {
        new_vector.push(x[index] + y[index]); 
    }
    new_vector
}

pub fn subtraction(x: Vec<f64>, y: Vec<f64>) -> Vec<f64> {
    let mut new_vector: Vec<f64> = Vec::new();

    for index in 0..x.len() {
        new_vector.push(x[index] + (-y[index]));
    }
    new_vector
}

pub fn vector_len(x: Vec<f64>, y: Vec<f64>) -> f64 {
    ((x[0] + y[0]) * (x[0] + y[0]) + (x[1] + y[1]) * (x[1] + y[1])).sqrt()
}

#[cfg(test)]
mod leanna_vector_tests {
    use super::*;

    #[test]
    fn add_test() {
        let x: Vec<f64> = vec![1f64,2f64,3f64,4f64];
        let y: Vec<f64> = vec![9f64, 8f64, 7f64, 6f64];

        assert_eq!(add(x, y), vec![10f64,10f64,10f64,10f64]);
    }

    #[test]
    fn subtraction_test() {
        let x: Vec<f64> = vec![6f64, 4f64];
        let y: Vec<f64> = vec![3f64, -2f64];

        assert_eq!(subtraction(x,y), vec![3f64, 6f64]);
    }

    #[test]
    fn vector_len_test() {
        let x: Vec<f64> = vec![4f64, 6f64];
        let y: Vec<f64> = vec![-2f64, 0f64];

        assert_eq!(vector_len(x, y), 6.324555320336759);
    }
}
